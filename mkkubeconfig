#!/bin/sh

_app=$(basename ${0})
_version="v0.0.1"

function usage() {
    cat <<EOT
${_app} ${_version}

Generates a barebones KUBECONFIG file for an existing service account and echoes it
to stdout.

Usage:

    $(basename ${0}) NAMESPACE SERVICEACCOUNT

Parameters:

    NAMESPACE       The Namespace where the ServiceAccount exists. May also be
                    specified using the SERVICEACCOUNT_NAMESPACE environment
                    variable.
    SERVICEACCOUNT  Name of the ServiceAccount for which to create a KUBECONFIG
                    file. May also be specified using the SERVICEACCOUNT_NAME
                    environment variable.

Other Environment Variables:

    CLUSTER_NAME    Name for the Cluster in the generated KUBECONFIG file.

EOT
}

SERVICEACCOUNT_NAMESPACE=${SERVICEACCOUNT_NAMESPACE:-$1}
SERVICEACCOUNT_NAME="${SERVICEACCOUNT_NAME:-$2}"
CLUSTER_NAME="${CLUSTER_NAME:-sa-cluster}"

if [ -z "${SERVICEACCOUNT_NAMESPACE}" ] || [ -z "${SERVICEACCOUNT_NAME}" ]; then
    usage
    exit 1
fi

function kc() {
    kubectl --namespace "${SERVICEACCOUNT_NAMESPACE}" "${@}"
}

# retrieve the default ServiceAccount secret
secret_name=$(kc get "serviceaccount/${SERVICEACCOUNT_NAME}"  --output "jsonpath={.secrets[0].name}")
secret=$(kc get "secret/${secret_name}" --output json)

# get current configuration
kubeconfig=$(kubectl config view --output json)
server=$(echo "${kubeconfig}" | jq -r ".clusters[] | select(.name == \"$(kubectl config current-context)\") | .cluster.server")

cat <<EOT
apiVersion: v1
kind: Config
current-context: ${CLUSTER_NAME}
preferences: {}
clusters:
- name: ${CLUSTER_NAME}
  cluster:
    certificate-authority-data: $(echo "${secret}" | jq -r '.data["ca.crt"]')
    server: ${server}
contexts:
- name: ${CLUSTER_NAME}
  context:
    cluster: ${CLUSTER_NAME}
    user: ${SERVICEACCOUNT_NAME}
users:
- name: ${SERVICEACCOUNT_NAME}
  user:
    token: $(echo "${secret}" | jq -r '.data.token' | base64 -d)
EOT
